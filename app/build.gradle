import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'com.android.application'
apply plugin: "org.ajoberstar.grgit"
apply from: "$project.rootDir/script-git-version.gradle"

// Load keystore
def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

//generate date
static def getDate() {
    LocalDateTime date = LocalDateTime.now()
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern('yyyy-MM-dd HH:mm:ss').withLocale(Locale.US)
    return date.format(formatter)
}

android {
    compileSdkVersion 33
    buildToolsVersion '33.0.0'
    if (keystorePropertiesFile.exists()) {
        signingConfigs {
            releaseConfig {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
    defaultConfig {
        applicationId "org.openimis.imispolicies"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = false
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.releaseConfig
            }
            buildConfigField "boolean", "LOGGING_ENABLED", "false"

            // Refer to https://developer.android.com/reference/android/util/Log for the log level values
            // Irrelevant if LOGGING_ENABLED = false
            buildConfigField "int", "CONSOLE_LOG_LEVEL", '8' //Assert
            buildConfigField "int", "FILE_LOG_LEVEL", '8' //Assert
        }
        debug {
            debuggable = true
            buildConfigField "boolean", "LOGGING_ENABLED", "true"

            // Refer to https://developer.android.com/reference/android/util/Log for the log level values
            buildConfigField "int", "CONSOLE_LOG_LEVEL", '2' //Verbose
            buildConfigField "int", "FILE_LOG_LEVEL", '5' //Warn
        }
        flavorDimensions 'std'
    }
    flavorDimensions 'std'
    productFlavors.all {
        buildConfigField "String", "API_BASE_URL", '"https://demo.openimis.org/rest/"'
        buildConfigField "boolean", "SHOW_PAYMENT_MENU", 'false'
        buildConfigField "boolean", "SHOW_BULK_CN_MENU", 'false'
        buildConfigField "String", "RAR_PASSWORD", '")(#$1HsD"'
        buildConfigField "String", "API_VERSION", '"3"'
        buildConfigField "String", "DEFAULT_LANGUAGE_CODE", '"en"'
        resValue "string", "app_name_policies", "Policies"
        resValue "string", "ReleaseDateValue", getDate()
    }
    productFlavors {
        demoProd {
            applicationId "org.openimis.imispolicies.demoProd"
            buildConfigField "String", "API_BASE_URL", '"https://demo.openimis.org/rest/"'
            resValue "string", "app_name_policies", "Policies Demo"
            dimension = 'std'
        }
        demoRelease {
            applicationId "org.openimis.imispolicies.demoRelease"
            buildConfigField "String", "API_BASE_URL", '"https://release.openimis.org/rest/"'
            resValue "string", "app_name_policies", "Policies Release"
            dimension = 'std'
        }
        chfDev {
            applicationId "org.openimis.imispolicies.chfdev"
            buildConfigField "String", "API_BASE_URL", '"http://chf-dev.swisstph-mis.ch/rest/"'
            buildConfigField "boolean", "SHOW_PAYMENT_MENU", 'true'
            buildConfigField "boolean", "SHOW_BULK_CN_MENU", 'true'
            buildConfigField "String", "DEFAULT_LANGUAGE_CODE", '"en-tz"'
            resValue "string", "app_name_policies", "Policies CHF DEV"
            dimension = 'std'
        }
        mvDev {
            applicationId "org.openimis.imispolicies.mv"
            buildConfigField "String", "API_BASE_URL", '"http://imis-mv.swisstph-mis.ch/rest/"'
            buildConfigField "boolean", "SHOW_PAYMENT_MENU", 'true'
            buildConfigField "String", "API_VERSION", '"3"'
            resValue "string", "app_name_policies", "Policies MV DEV"
            dimension = 'std'
        }
        bephaDev {
            applicationId "org.openimis.imispolicies.bepha"
            buildConfigField "String", "API_BASE_URL", '"http://149.210.235.40/devupgrade/rest/"'
            buildConfigField "String", "DEFAULT_LANGUAGE_CODE", '"en-cm"'
            resValue "string", "app_name_policies", "Policies BEPHA DEV"
            dimension = 'std'
        }
        tchadDev {
            applicationId "org.openimis.imispolicies.tchadDev"
            buildConfigField "String", "API_BASE_URL", '"http://imis-tchad-dev.swisstph-mis.ch/rest/"'
            resValue "string", "app_name_policies", "Policies TCHAD DEV"
            dimension = 'std'
        }
        local {
            applicationId "org.openimis.imispolicies.local"
            buildConfigField "String", "API_BASE_URL", '"http://10.0.2.2:35787/"'
            buildConfigField "boolean", "SHOW_PAYMENT_MENU", 'true'
            resValue "string", "app_name_policies", "Policies Local"
            dimension = 'std'
            versionCode = gitVersionCodeTime
        }
        niger {
            applicationId "org.openimis.imispolicies.niger"
            buildConfigField "String", "API_BASE_URL", '"' + (System.getenv("API_BASE_URL") ?: 'http://192.168.0.100/') + '"'
            resValue "string", "app_name_policies", System.getenv("CLI_APP_NAME") ?: "Polices Niger"
            dimension = 'std'
        }
        cli {
            applicationIdSuffix System.getenv("APPLICATION_ID") ?: "org.openimis.imispolicies.cli"
            buildConfigField "String", "API_BASE_URL", '"' + (System.getenv("API_BASE_URL") ?: 'http://10.0.2.2:35787/') + '"'
            resValue "string", "app_name_policies", System.getenv("CLI_APP_NAME") ?: "Policies CLI"
            dimension 'std'
        }
        mauritaniaTrain {
            applicationId "org.openimis.policies.mauritaniaTrain"
            buildConfigField "String", "API_BASE_URL", '"https://formation.cnass-mauritanie.swisstph-mis.ch/rest/"'
            buildConfigField "boolean", "SHOW_PAYMENT_MENU", 'false'
            buildConfigField "boolean", "SHOW_BULK_CN_MENU", 'false'
            resValue "string", "app_name_policies", "Policies CNASS TRAIN"
            dimension = 'std'
        }
    }
    sourceSets {
        chfDev.java.srcDir 'src/chf/java'
        chfDev.res.srcDirs = ['src/chf/res', 'src/localeChf/res']

        mvDev.java.srcDir 'src/master/java'
        mvDev.res.srcDirs = ['src/master/res', 'src/localeMv/res']

        local.java.srcDir 'src/master/java'
        local.res.srcDirs = ['src/master/res', 'src/localeMv/res']

        bephaDev.java.srcDir 'src/bepha/java'
        bephaDev.res.srcDirs = ['src/bepha/res', 'src/localeBepha/res']

        niger.java.srcDir 'src/niger/java'
        niger.res.srcDir 'src/niger/res'
        niger.assets.srcDir 'src/niger/assets'

        tchadDev.java.srcDir 'src/tchad/java'
        tchadDev.res.srcDir 'src/tchad/res'

        demoProd.java.srcDir 'src/master/java'
        demoProd.res.srcDirs = ['src/demoProd/res', 'src/localeMv/res']

        demoRelease.java.srcDir 'src/master/java'
        demoRelease.res.srcDirs = ['src/demoRelease/res', 'src/localeMv/res']

        cli.java.srcDir System.getenv("CLI_JAVA_DIR") ?: 'src/master/java'
        cli.res.srcDir System.getenv("CLI_RES_DIR") ?: 'src/demoProd/res'
        if (System.getenv("CLI_ASSETS_DIR")) {
            cli.assets.srcDir System.getenv("CLI_ASSETS_DIR")
        }

        mauritaniaTrain.java.srcDir 'src/master/java'
    }

    // Apply custom flavours
    if (file('custom-flavours.gradle').exists()) {
        apply from: 'custom-flavours.gradle'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'cz.msebera.android:httpclient:4.5.8'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.13.2'
}
